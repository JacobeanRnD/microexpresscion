#!/usr/bin/env node

/**
 * Module dependencies.
 */

var microexpresscion = require('../index');
var debug = require('debug')('microexpresscion:server');
var http = require('http');
var SwaggerClient = require('swagger-client');

var argv = require('optimist')
    .usage('Count the lines in a file.\nUsage: $0')
    .demand(1)
    .alias('s', 'singleton')
    .describe('s', 'Singleton instance id')
    .argv;

var pathToScxml = argv._[0];

if(!pathToScxml) throw new Error('Path to SCXML not specified');

microexpresscion.initExpress(pathToScxml,function(err, app){

  if(err) throw err;

  /**
   * Get port from environment and store in Express.
   */

  var port = normalizePort(process.env.PORT || '3000');
  app.set('port', port);

  /**
   * Create HTTP server.
   */

  var server = http.createServer(app);

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);

  /**
   * Normalize a port into a number, string, or false.
   */

  function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (port >= 0) {
      // port number
      return port;
    }

    return false;
  }

  /**
   * Event listener for HTTP server "error" event.
   */

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    console.log('Listening on ' + bind);


    var SINGLETON_INSTANCEID = argv.s;
    if(SINGLETON_INSTANCEID){
      console.log('Creating singleton instance');
      //use the swagger js client library to set up singleton instance
      var swagger = new SwaggerClient({
        url: 'http://0.0.0.0:' + addr.port + '/api/v3/smaas.json',
        success: function(){
          swagger.apis.scxml.createNamedInstance(
            { InstanceId: SINGLETON_INSTANCEID },
            function onInstanceSuccess (data) {
              console.log('Created singleton instance: ', data.headers.location);
              console.log('Starting singleton');

              //initialize the instance
              swagger.apis.scxml.sendEvent(
                {  
                  InstanceId: SINGLETON_INSTANCEID,
                  Event: {name : 'system.start'}
                }, function (response) {
                  console.log('Started singleton: ',response.data);
                }, function (data) {
                  console.log('Error starting singleton',data);
                });
            },
            function onInstanceError (data) {
              console.log('Error on instance creation', data.data.toString());
            });
        }
      }); 
    }
  }
});
